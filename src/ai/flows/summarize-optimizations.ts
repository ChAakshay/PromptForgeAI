'use server';

/**
 * @fileOverview Summarizes the optimizations made to a prompt.
 *
 * - summarizeOptimizations - A function that takes the original and optimized prompts and returns a summary of the changes.
 * - SummarizeOptimizationsInput - The input type for the summarizeOptimizations function.
 * - SummarizeOptimizationsOutput - The return type for the summarizeOptimizations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SummarizeOptimizationsInputSchema = z.object({
  originalPrompt: z.string().describe('The original prompt entered by the user.'),
  optimizedPrompt: z.string().describe('The optimized prompt generated by the AI.'),
});
export type SummarizeOptimizationsInput = z.infer<typeof SummarizeOptimizationsInputSchema>;

const SummarizeOptimizationsOutputSchema = z.object({
  summary: z.string().describe('A summary of the optimizations made to the prompt.'),
});
export type SummarizeOptimizationsOutput = z.infer<typeof SummarizeOptimizationsOutputSchema>;

export async function summarizeOptimizations(input: SummarizeOptimizationsInput): Promise<SummarizeOptimizationsOutput> {
  return summarizeOptimizationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'summarizeOptimizationsPrompt',
  input: {schema: SummarizeOptimizationsInputSchema},
  output: {schema: SummarizeOptimizationsOutputSchema},
  prompt: `You are an expert prompt engineer. You will be provided with an original prompt and an optimized prompt.
Your task is to summarize the changes made to the prompt, highlighting the specific areas of improvement. Be concise and focus on the key changes that make the optimized prompt better than the original.  For example, mention if a persona was added, the format was improved, or the instructions were clarified.

Original Prompt: {{{originalPrompt}}}
Optimized Prompt: {{{optimizedPrompt}}}

Summary: `,
});

const summarizeOptimizationsFlow = ai.defineFlow(
  {
    name: 'summarizeOptimizationsFlow',
    inputSchema: SummarizeOptimizationsInputSchema,
    outputSchema: SummarizeOptimizationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
